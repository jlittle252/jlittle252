//lexical analyzer system for simple arithmetic expressions 
#include <iostream>
#include <cctype>
#include <fstream>
#include <string>
#include <cctype>
#include <unordered_map>

using namespace std;

/* Global declarations */
/* Variables */
int charClass;
char lexeme[100];
char nextChar;
int lexLen;
int token;
int nextToken;
const int END_OF_FILE = EOF; // Using a named constant for EOF
std::ifstream file("sourceCode1.txt");


/* Function declarations */
void addChar();
void getChar();
void getNonBlank();
void lookup();
void term();
void factor();
int lex();
void error();
void exper();


/* Character classes */
#define LETTER 0
#define DIGIT 1
#define UNKNOWN 99


/* Token codes */
#define INT_LIT 10
#define IDENT 11
#define ASSIGN_OP 20
#define ADD_OP 21
#define SUB_OP 22
#define MULT_OP 23
#define DIV_OP 24
#define LEFT_PAREN 25
#define RIGHT_PAREN 26
#define LEFT_bracket 27
#define RIGHT_bracket 28
#define simicolen 29
#define EQOPP 30
#define GT 31


// Token name mapping
unordered_map<int, string> tokenNames = {
{INT_LIT, "INT_LIT"},
{IDENT, "IDENT"},
{ASSIGN_OP, "ASSIGN_OP"},
{ADD_OP, "ADD_OP"},
{SUB_OP,"SUB_OP"},
{MULT_OP, "MULT_OP"},
{DIV_OP, "DIV_OP" },
{LEFT_PAREN, "LEFT_PAREN"},
{RIGHT_PAREN, "RIGHT_PAREN"},
{LEFT_bracket, "LEFT_bracket"},
{RIGHT_bracket, "RIGHT_bracket"},
{simicolen, "simicolen"},
{EQOPP,"EQOPP"},
{GT, "GT"}

};

/* main driver */
int main() {
  
    /* Open the input data file and process its contents */
    
    if (!file) {
        cout << "ERROR - cannot open file" << endl;
        return 1;
    } else {
        getChar();
        do {
            lex();
        } while (nextToken != EOF);
    }
    file.close();
    return 0;
}// end of main


/* lookup - a function to lookup operators and parentheses
   and return the token */
int lookup(char ch) {
    switch (ch) {
        case '(':
            addChar();
            nextToken = LEFT_PAREN;
            break;
        case ')':
            addChar();
            nextToken = RIGHT_PAREN;
            break;
        case '{':
            addChar();
            nextToken = LEFT_bracket;
            break;
        case '}':
            addChar();
            nextToken = RIGHT_bracket;
            break;
        case '+':
            addChar();
            nextToken = ADD_OP;
            break;
        case '-':
            addChar();
            nextToken = SUB_OP;
            break;
        case '*':
            addChar();
            nextToken = MULT_OP;
            break;
        case '/':
            addChar();
            nextToken = DIV_OP;
            break;
        case ';':
            addChar();
            nextToken = simicolen;
            break;
        case '=':
            addChar();
            nextToken = EQOPP;
            break;
        case '>':
            addChar();
            nextToken = GT;
            break;
            nextToken = EOF;
            break;
    }
    return nextToken;
}// end of lookUp

// Function to add nextChar to lexeme
void addChar() {
    if (lexLen <= 98) {
        lexeme[lexLen++] = nextChar;
        lexeme[lexLen] = 0;
    } else {
        std::cerr << "Error - lexeme is too long" << std::endl;
    }
}// end of addChar

void getChar() {
    if (file.get(nextChar)) { // Read next character from file
        if (std::isalpha(nextChar))
            charClass = LETTER;
        else if (std::isdigit(nextChar))
            charClass = DIGIT;
        else
            charClass = UNKNOWN;
    } else {
        charClass = END_OF_FILE; // Set class to EOF when end of file is reached
    }
}// end of getChar

// Function to call getChar until it returns a non-whitespace character
void getNonBlank() {
    while (isspace(nextChar)) {
        getChar();
    }
}
// Lexical analyzer function
int lex() {
    lexLen = 0; // Reset lexeme
    getNonBlank();
    
    switch (charClass) {
        /* Parse identifiers */
        case LETTER:
            addChar();
            getChar();
            while (charClass == LETTER || charClass == DIGIT) {
                addChar();
                getChar();
            }
            nextToken = IDENT;
            break;

        /* Parse integer literals */
        case DIGIT:
            addChar();
            getChar();
            while (charClass == DIGIT) {
                addChar();
                getChar();
            }
            nextToken = INT_LIT;
            break;

        /* Parentheses and operators */
        case UNKNOWN:
            lookup(nextChar);
            getChar();
            break;

        /* EOF */
        case END_OF_FILE:
            nextToken = END_OF_FILE;
            strcpy(lexeme, "EOF");
            break;
    } /* End of switch */

     cout << "Token:  " <<  tokenNames[nextToken]  
     << ",   Lexeme: " << lexeme << endl;
    
    return nextToken;
} /* End of lex function */

/* parses string in the language generated by the 
        rule: <expr> -> <term> {(+ | -) <term>} 
*/
void exper(){
    cout << "Enter <expr>" <<std::endl;

    //parse first term
    term();
    // get the next token as long as its + or -, get the next token then parse the next term
    while (nextToken == ADD_OP || SUB_OP ) {
        lex();
        term();
    }
    std::cout << "Exit <expr>" << std::endl;
}
/* term
   Parses strings in the language generated by the rule:
   <term> -> <factor> {(* | /) <factor>) 
   */
  void term() {
    std :: cout << " Enter <term> " << std :: endl;

    //parse first factor
    factor();
    /* As long as the next token is * or /, get the
   next token and parse the next factor */

   while (nextToken == MULT_OP ||  DIV_OP){
    lex();
    factor();

   }
   std:: cout << "Exit <term>" << std :: endl;

  }// end of term function 

/* factor
   Parses strings in the language generated by the rule:
   <factor> -> id | int_constant | ( <expr )
   */
void factor() {
  std :: cout<< "Enter <factor>" << std :: endl;
/* Determine which RHS */
  if (nextToken == IDENT || INT_LIT)
/* Get the next token */
    lex();
/* If the RHS is ( <expr> ), call lex to pass over the 
   left parenthesis, call expr, and check for the right
   parenthesis */
  else  {
    if  (nextToken == LEFT_PAREN) {
      lex();
      exper();
      if (nextToken == RIGHT_PAREN)
        lex();
      else
        error();
    }  /* End of if (nextToken == ... */
/* It was not an id, an integer literal, or a left
   parenthesis */
    else error();
  } /* End of else */
   cout<< "Exit <factor>" <<  endl;
} /* End of factor function */

void error(){
     cout<< "Syntax Error" <<  endl;

}
